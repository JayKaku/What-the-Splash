{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","constants/index.js","actions/index.js","components/Button/Button.js","components/Button/index.js","components/Stats/index.js","components/Stats/Stats.js","components/ImageGrid/ImageGrid.js","components/ImageGrid/index.js","API/index.js","sagas/imagesSaga.js","sagas/statsSaga.js","sagas/index.js","reducers/loadingReducer.js","reducers/imagesReducer.js","reducers/errorReducer.js","reducers/pageReducer.js","reducers/statsReducer.js","reducers/index.js","App.js","store/index.js","reportWebVitals.js","index.js"],"names":["Header","IMAGES","STATS","setImages","images","type","loadImageStats","id","setImageStats","downloads","setImageStatsError","Button","children","loading","props","className","disabled","defaultProps","Stats","stats","error","isLoading","ImageGrid","state","this","loadImages","imageStats","map","image","Math","ceil","height","width","src","urls","small","alt","user","username","JSON","stringify","onClick","Component","connect","dispatch","KEY","URL","fetchImages","page","a","fetch","res","json","data","status","Error","errors","fetchImagesStats","handleImageLoad","watchImagesLoad","getPage","nextPage","select","call","put","toString","takeEvery","handleStateRequest","watchStatsRequest","i","total","take","length","fork","rootSaga","all","imagesSaga","statsSaga","loadingReducer","action","imagesReducer","errorReducer","pageReducer","statsReducer","rootReducer","combineReducers","store","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","configureStore","App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07c3acbe.chunk.js","sourcesContent":["import Header from './Header';\n\nexport default Header;\n","import React from 'react';\n\nimport './styles.css';\n\nconst Header = () => <header>What the Splash!</header>;\n\nexport default Header;\n","const IMAGES = {\r\n    LOAD: 'IMAGES_LOAD',\r\n    LOAD_SUCCESS: 'IMAGES_LOAD_SUCCESS',\r\n    LOAD_FAIL: 'IMAGES_LOAD_FAIL',\r\n}\r\n\r\nconst STATS = {\r\n    LOAD: 'STATS_LOAD',\r\n    LOAD_SUCCESS: 'STATS_LOAD_SUCCESS',\r\n    LOAD_FAIL: 'STATS_LOAD_FAIL',\r\n};\r\n\r\nexport {IMAGES, STATS};","import {IMAGES, STATS} from '../constants'\r\n\r\nconst loadImages =()=>({\r\n    type: IMAGES.LOAD,\r\n});\r\n\r\nconst setImages = images =>({\r\n    type: IMAGES.LOAD_SUCCESS,\r\n    images\r\n});\r\n\r\nconst setError = error => ({\r\n    type: IMAGES.LOAD_FAIL,\r\n    error,\r\n});\r\n\r\nconst loadImageStats = id => ({\r\n    type: STATS.LOAD,\r\n    id,\r\n});\r\n\r\nconst setImageStats = (id, downloads) => ({\r\n    type: STATS.LOAD_SUCCESS,\r\n    id,\r\n    downloads,\r\n});\r\n\r\nconst setImageStatsError = id => ({\r\n    type: STATS.LOAD_FAIL,\r\n    id,\r\n});\r\n\r\nexport {\r\n    loadImages,\r\n    setImages,\r\n    setError,\r\n    loadImageStats,\r\n    setImageStats,\r\n    setImageStatsError,\r\n};","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nconst Button = ({ children, loading, ...props }) => (\r\n    <button className=\"button\" disabled={loading} {...props}>\r\n        {loading ? 'Loading...' : children}\r\n    </button>\r\n);\r\n\r\nButton.defaultProps = {\r\n    loading: false,\r\n};\r\n\r\nexport default Button;","import Button from './Button';\r\n\r\nexport default Button;","import Stats from './Stats';\r\n\r\nexport default Stats;","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nconst Stats = ({ stats }) => {\r\n    if (!stats) {\r\n        // loading not yet started\r\n        return <span className=\"stats\">Loading...</span>;\r\n    }\r\n    return (\r\n        <span className=\"stats\">\r\n            {stats.error && 'ðŸ¤¯ Error!'}\r\n            {stats.isLoading && 'ðŸ™„ Loading...'}\r\n            {stats.downloads !== null && `ðŸ¤˜ ${stats.downloads}`}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default Stats;","import React, { Component } from 'react';\nimport {connect} from 'react-redux'\n\nimport {loadImages} from '../../actions/index'\n\nimport './styles.css';\nimport Button from '../Button'\n\nimport Stats from '../Stats'\n\nclass ImageGrid extends Component {\n    state = {\n        images: [],\n    };\n\n\n    componentDidMount() {\n        this.props.loadImages();\n    }\n\n    render() {\n        const { images, isLoading, error, loadImages, imageStats } = this.props;\n        //console.log(images)\n        return (\n            <div className=\"content\">\n                <section className=\"grid\">\n                    {images.map(image => (\n                        <div\n                            key={image.id}\n                            className={`item item-${Math.ceil(\n                                image.height / image.width,\n                            )}`}\n                        >\n                            <Stats stats={imageStats[image.id]}/>\n                            <img\n                                src={image.urls.small}\n                                alt={image.user.username}\n                            />\n                        </div>\n                    ))}\n                    \n                </section>\n                {error && <div className=\"error\">{JSON.stringify(error)}</div>}\n                <Button\n                        onClick={() => !isLoading && loadImages()}\n                        loading={isLoading}\n                    >\n                    Load More\n                    </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state)=>{\n    //console.log(state)\n    let {isLoading, error, images, imageStats } = state\n    return{\n        isLoading,\n        error,\n        images,\n        imageStats\n    }\n};\n\nconst mapDispatchToProps = (dispatch) =>({\n    loadImages : () => dispatch(loadImages()),\n})\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ImageGrid);\n","import ImageGrid from './ImageGrid';\n\nexport default ImageGrid;\n","const KEY =\r\n    '?client_id=5f96323678d05ff0c4eb264ef184556868e303b32a2db88ecbf15746e6f25e02';\r\nconst URL = `https://api.unsplash.com/photos/`;\r\n\r\nconst fetchImages = async page =>{\r\n    const res = await fetch(`${URL}${KEY}&per_page=3&page=${page}`);\r\n    //console.log(\"I am here at api\", res)\r\n    const data = await res.json();\r\n    //console.log(data)\r\n    if(res.status >= 400){\r\n        throw new Error(data.errors)\r\n    }\r\n    return data;\r\n}\r\n\r\nconst fetchImagesStats = async id =>{\r\n    const res = await fetch(`${URL}/${id}/statistics${KEY}`)\r\n    const data = await res.json();\r\n    if(res.status >= 400 ){\r\n        throw new Error(data.errors)\r\n    }\r\n    return data;\r\n}\r\n\r\nexport {fetchImages,fetchImagesStats};","import {takeEvery, select, call, put } from 'redux-saga/effects'\r\nimport {fetchImages} from '../API'\r\nimport {setImages, setError} from '../actions'\r\nimport { IMAGES } from '../constants'\r\n\r\nexport const getPage = state => state.nextPage;\r\n\r\n//worker saga\r\nexport function* handleImageLoad(){\r\n    try {\r\n        // do api calling\r\n        const page = yield select(getPage)\r\n        const images = yield call(fetchImages, page)\r\n        //console.log('at saga',images)\r\n        yield put(setImages(images))\r\n    } catch (error) {\r\n        //dispatch error\r\n        yield put(setError(error.toString()))\r\n    }\r\n}\r\n\r\n// watcher saga it watches for that particular action\r\nexport default function* watchImagesLoad(){\r\n    yield takeEvery(IMAGES.LOAD,handleImageLoad)\r\n}\r\n\r\n// watcher saga listens listens to an action and it'll invoke the worker saga","import {takeEvery, select, call, put, take, forEach, fork } from 'redux-saga/effects'\r\nimport { loadImageStats, setImageStats, setImageStatsError } from '../actions'\r\nimport { fetchImagesStats } from '../API'\r\nimport { IMAGES, STATS } from '../constants'\r\n\r\nfunction* handleStateRequest(id){\r\n    for(let i = 0; i<3; i++)\r\n    {\r\n        try {\r\n            yield put(loadImageStats(id))\r\n            const res = yield call(fetchImagesStats,id)\r\n            yield put(setImageStats(id , res.downloads.total))\r\n            return true\r\n        } catch (err) {}\r\n    }\r\n    yield put(setImageStatsError(id))\r\n}\r\n\r\nexport default function* watchStatsRequest() {\r\n    while(true){\r\n       const {images} = yield take(IMAGES.LOAD_SUCCESS)\r\n\r\n       for(let i = 0; i< images.length; i++){\r\n        yield fork(handleStateRequest, images[i].id)\r\n       }\r\n\r\n    }\r\n}\r\n\r\n//fork is very similar to call to handle the task but it helps us make parall calls ","import {all} from 'redux-saga/effects'\r\nimport imagesSaga from './imagesSaga'\r\nimport statsSaga from './statsSaga'\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([imagesSaga(),statsSaga()])\r\n}","import { IMAGES } from '../constants';\r\n\r\nconst loadingReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case IMAGES.LOAD:\r\n            return true;\r\n        case IMAGES.LOAD_SUCCESS:\r\n            return false;\r\n        case IMAGES.LOAD_FAIL:\r\n            return false;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default loadingReducer;","import { IMAGES } from '../constants';\r\n\r\nconst imagesReducer = (state = [], action) => {\r\n    if (action.type === IMAGES.LOAD_SUCCESS) {\r\n        return [...state, ...action.images];\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default imagesReducer;","\r\nimport { IMAGES } from '../constants';\r\n\r\nconst errorReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case IMAGES.LOAD_FAIL:\r\n            return action.error;\r\n        case IMAGES.LOAD:\r\n        case IMAGES.LOAD_SUCCESS:\r\n            return null;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default errorReducer;","import { IMAGES } from '../constants';\r\n\r\nconst pageReducer = (state = 1, action) => {\r\n    switch (action.type) {\r\n        case IMAGES.LOAD_SUCCESS:\r\n            return state + 1;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default pageReducer;","import { STATS } from '../constants';\r\n\r\nconst statsReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case STATS.LOAD:\r\n            return {\r\n                ...state,\r\n                [action.id]: {\r\n                    isLoading: true,\r\n                    downloads: null,\r\n                    error: false,\r\n                },\r\n            };\r\n        case STATS.LOAD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                [action.id]: {\r\n                    isLoading: false,\r\n                    downloads: action.downloads,\r\n                    error: false,\r\n                },\r\n            };\r\n        case STATS.LOAD_FAIL:\r\n            return {\r\n                ...state,\r\n                [action.id]: {\r\n                    isLoading: false,\r\n                    downloads: null,\r\n                    error: true,\r\n                },\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default statsReducer;","import loadingReducer from './loadingReducer'\r\nimport imagesReducer from './imagesReducer'\r\nimport errorReducer from './errorReducer'\r\nimport pageReducer from './pageReducer'\r\nimport statsReducer from './statsReducer'\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    isLoading: loadingReducer,\r\n    images: imagesReducer,\r\n    error: errorReducer,\r\n    nextPage: pageReducer,\r\n    imageStats: statsReducer\r\n});\r\n\r\n\r\nexport default rootReducer;","// import logo from './logo.svg';\n// import './App.css';\n// import { Component } from 'react';\n// import { BrowserRouter, Switch, Route } from \"react-router-dom\";\n// import Land from \"./components/Land\";\n// import Get from \"./components/Get\";\n// import Post from './components/Post';\n// import Search from './components/Search';\n// import LetsSee from './Practise/LetsSee';\n// import FormPropsTextFields from './MaterialUItest/FormFieldTest';\n\n// class App extends Component {\n\n//   // state ={\n//   //   data:\"\",\n//   //   loaded:false,\n//   // }\n\n//   // componentDidMount(){\n//   //   fetch(\"https://cors-anywhere.herokuapp.com/https://pipelinepredators.herokuapp.com/question-get-create\")\n//   //   .then(res=>{\n//   //     return res.json();\n//   //   })\n//   //   .then(data =>{\n//   //     this.setState(()=>{\n//   //       return{\n//   //         data,\n//   //         loaded:true\n//   //       }\n//   //     })\n//   //   })\n//   // }\n\n//   render(){\n    \n//     //console.log(this.state.data);\n//     return (\n//       <BrowserRouter>\n//         <Switch>\n//           <Route exact path='/' component={Land}/>\n//           <Route path='/get' component={Get}/>\n//           <Route path='/post' component={Post}/>\n//           <Route path='/search' component={Search}/>\n//           <Route path='/practise' component={LetsSee}/>\n//           {/* <Route path='/formtest' component={}/> */}\n//         </Switch>\n//       </BrowserRouter>\n//     );\n//   }\n// }\n\n// export default App;\n\n// // Edvin Clement , Anmol Singh , \n// // doctor availability / assigning, critical level, redirectly patients to different hostpitals\n// // doctor scheduling , map with density of patients, \n// // concenterate of each word in the PR\n// // Covid 19 test result , last Covid 19 test details,\n// // data at a glace and and selection of particular data viewing \n// // encryption\n\nimport React, { Component } from 'react';\nimport {Provider} from \"react-redux\";\nimport Header from './components/Header';\nimport ImageGrid from './components/ImageGrid';\n\nimport configureStore from './store'\n\nconst store = configureStore();\n//console.log(store);\nclass App extends Component {\n    render() {\n        return (\n            <Provider store = {store}>\n              <React.Fragment>\n                <div>\n                  <Header/>\n                  <ImageGrid/>\n                </div>\n              </React.Fragment>\n            </Provider>\n        );\n    }\n}\n\nexport default App;","import { applyMiddleware, createStore , compose} from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport  rootSaga from '../sagas'\r\nimport rootReducer from '../reducers'\r\n\r\nconst configureStore =()=>{\r\n    // create the saga middleware\r\n    const sagaMiddleware = createSagaMiddleware()\r\n    const store = createStore(\r\n        rootReducer,compose(applyMiddleware(sagaMiddleware),window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n    );\r\n    sagaMiddleware.run(rootSaga);\r\n    return store;\r\n}\r\n\r\nexport default configureStore;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}